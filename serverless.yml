service: wild-rides-serverless-demo
app: serverless-demo
tenant: karuppiah7890
frameworkVersion: '=1.32.0'

provider:
  name: aws
  runtime: nodejs8.10

functions:
  RequestUnicorn:
    handler: handler.handler
    role: WildRydesLambdaRole
    memorySize: 128

resources:
  Resources:
    WildRydesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: wildrydes-karuppiah-natarajan
        WebsiteConfiguration:
          IndexDocument: index.html
    WildRydesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: 'WildRydesBucket'
        PolicyDocument:
          Statement:
            - Effect: 'Allow'
              Principal: '*'
              Action:
                - 's3:GetObject'
              Resource:
                Fn::Join:
                  - ''
                  - - 'arn:aws:s3:::'
                    - Ref: 'WildRydesBucket'
                    - '/*'
    WildRydesCognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: WildRydes
    WildRydesCognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: WildRydesWebApp
        GenerateSecret: false
        UserPoolId:
          Ref: 'WildRydesCognitoUserPool'
    WildRydesDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Rides
        AttributeDefinitions:
          - AttributeName: RideId
            AttributeType: S
        KeySchema:
          - AttributeName: RideId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    WildRydesLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: WildRydesLambda
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: DynamoDBWriteAccess
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - 'Fn::Join':
                        - ':'
                        - - 'arn:aws:logs'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'log-group:/aws/lambda/*:*:*'
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]
    WildRydesApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: WildRydes
        EndpointConfiguration:
          Types:
            - EDGE
    WildRydesApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: WildRydes
        RestApiId:
          Ref: WildRydesApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [WildRydesCognitoUserPool, Arn]
        IdentitySource: method.request.header.Authorization
    WildRydeApiGatewayRidesResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        ParentId:
          Fn::GetAtt: [WildRydesApiGatewayRestApi, RootResourceId]
        PathPart: ride
        RestApiId:
          Ref: WildRydesApiGatewayRestApi
    WildRydesRideOptionsMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        RestApiId:
          Ref: WildRydesApiGatewayRestApi
        ResourceId:
          Ref: WildRydeApiGatewayRidesResource
        HttpMethod: OPTIONS
        Integration:
          IntegrationResponses:
            - StatusCode: 200
              ResponseParameters:
                method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                method.response.header.Access-Control-Allow-Origin: "'*'"
              ResponseTemplates:
                application/json: ''
          PassthroughBehavior: WHEN_NO_MATCH
          RequestTemplates:
            application/json: '{"statusCode": 200}'
          Type: MOCK
        MethodResponses:
          - StatusCode: 200
            ResponseModels:
              application/json: 'Empty'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: false
              method.response.header.Access-Control-Allow-Methods: false
              method.response.header.Access-Control-Allow-Origin: false
    WildRydesRidePostMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizerId:
          Ref: WildRydesApiGatewayAuthorizer
        AuthorizationType: COGNITO_USER_POOLS
        HttpMethod: POST
        ResourceId:
          Ref: WildRydeApiGatewayRidesResource
        RestApiId:
          Ref: WildRydesApiGatewayRestApi
        Integration:
          Type: AWS_PROXY
          IntegrationHttpMethod: POST
          Uri:
            Fn::Join:
              - ':'
              - - 'arn:aws:apigateway'
                - Ref: 'AWS::Region'
                - 'lambda'
                - Fn::Join:
                    - '/'
                    - - 'path'
                      - '2015-03-31'
                      - 'functions'
                      - Fn::GetAtt: [RequestUnicornLambdaFunction, Arn]
                      - 'invocations'
  Outputs:
    WildRydesBucketURL:
      Description: 'Wild Rydes Bucket Website URL'
      Value:
        'Fn::GetAtt': [WildRydesBucket, WebsiteURL]
    WildRydesCognitoUserPoolId:
      Description: 'Wild Rydes Cognito User Pool ID'
      Value:
        Ref: 'WildRydesCognitoUserPool'
    WildRydesCognitoUserPoolClientId:
      Description: 'Wild Rydes Cognito User Pool Client ID'
      Value:
        Ref: 'WildRydesCognitoUserPoolClient'
    WildRydesDynamoDbARN:
      Description: 'Wild Rydes DynamoDB ARN'
      Value:
        'Fn::GetAtt': [WildRydesDynamoDBTable, Arn]
    WildRydesApiGatewayRestApiId:
      Description: 'Wild Rydes API Gateway ID'
      Value:
        Ref: 'WildRydesApiGatewayRestApi'
    WildRydesApiGatewayAuthorizerId:
      Description: 'Wild Rydes API Authorizer'
      Value:
        Ref: 'WildRydesApiGatewayAuthorizer'
